title: Divide
signature: divide(divisor, roundingMode)
description: |
  Returns a new Dinero object that represents the divided value by the given factor.

  By default, fractional minor currency units are rounded using the **half to even** rule ([banker's rounding](http://wiki.c2.com/?BankersRounding)).

  Rounding *can* lead to accuracy issues as you chain many times. Consider a minimal amount of subsequent calculations for safer results.
  You can also specify a different `roundingMode` to better fit your needs.

  As rounding is applied, precision may be lost in the process. If you want to accurately split a Dinero object, use [allocate](/api/manipulation/allocate) instead.
examples:
- title: Divide
  code: |
    // returns a Dinero object with amount 100
    Dinero({ amount: 400 })
      .divide(4)
- title: Divide and round with default rounding mode
  code: |
    // returns a Dinero object with amount 52
    Dinero({ amount: 105 })
      .divide(2)
- title: Divide and round with specified rounding mode
  code: |
    // returns a Dinero object with amount 53
    Dinero({ amount: 105 })
      .divide(2, 'HALF_UP')
parameters:
- name: divisor
  type: number
  required: true
  description: The factor to divide by.
- name: roundingMode
  type: string
  default: HALF_EVEN
  description: The rounding mode to use.
  possible_values:
  - HALF_ODD
  - HALF_EVEN
  - HALF_UP
  - HALF_DOWN
  - HALF_TOWARDS_ZERO
  - HALF_AWAY_FROM_ZERO
response_type: Dinero
